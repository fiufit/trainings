// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	goals "github.com/fiufit/trainings/contracts/goals"
	mock "github.com/stretchr/testify/mock"

	models "github.com/fiufit/trainings/models"
)

// Goals is an autogenerated mock type for the Goals type
type Goals struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, goal
func (_m *Goals) Create(ctx context.Context, goal models.Goal) (models.Goal, error) {
	ret := _m.Called(ctx, goal)

	var r0 models.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Goal) (models.Goal, error)); ok {
		return rf(ctx, goal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Goal) models.Goal); ok {
		r0 = rf(ctx, goal)
	} else {
		r0 = ret.Get(0).(models.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Goal) error); ok {
		r1 = rf(ctx, goal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, goalID
func (_m *Goals) Delete(ctx context.Context, goalID uint) error {
	ret := _m.Called(ctx, goalID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, goalID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, req
func (_m *Goals) Get(ctx context.Context, req goals.GetGoalsRequest) ([]models.Goal, error) {
	ret := _m.Called(ctx, req)

	var r0 []models.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goals.GetGoalsRequest) ([]models.Goal, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goals.GetGoalsRequest) []models.Goal); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Goal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, goals.GetGoalsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, goalID
func (_m *Goals) GetByID(ctx context.Context, goalID uint) (models.Goal, error) {
	ret := _m.Called(ctx, goalID)

	var r0 models.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (models.Goal, error)); ok {
		return rf(ctx, goalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) models.Goal); ok {
		r0 = rf(ctx, goalID)
	} else {
		r0 = ret.Get(0).(models.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, goalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, goal
func (_m *Goals) Update(ctx context.Context, goal models.Goal) (models.Goal, error) {
	ret := _m.Called(ctx, goal)

	var r0 models.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Goal) (models.Goal, error)); ok {
		return rf(ctx, goal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Goal) models.Goal); ok {
		r0 = rf(ctx, goal)
	} else {
		r0 = ret.Get(0).(models.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Goal) error); ok {
		r1 = rf(ctx, goal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBySession provides a mock function with given fields: ctx, session
func (_m *Goals) UpdateBySession(ctx context.Context, session models.TrainingSession) ([]models.Goal, error) {
	ret := _m.Called(ctx, session)

	var r0 []models.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TrainingSession) ([]models.Goal, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TrainingSession) []models.Goal); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Goal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TrainingSession) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGoals interface {
	mock.TestingT
	Cleanup(func())
}

// NewGoals creates a new instance of Goals. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGoals(t mockConstructorTestingTNewGoals) *Goals {
	mock := &Goals{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
