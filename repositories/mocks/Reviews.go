// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/fiufit/trainings/models"
	mock "github.com/stretchr/testify/mock"

	reviews "github.com/fiufit/trainings/contracts/reviews"
)

// Reviews is an autogenerated mock type for the Reviews type
type Reviews struct {
	mock.Mock
}

// CreateReview provides a mock function with given fields: ctx, review
func (_m *Reviews) CreateReview(ctx context.Context, review models.Review) (models.Review, error) {
	ret := _m.Called(ctx, review)

	var r0 models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Review) (models.Review, error)); ok {
		return rf(ctx, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Review) models.Review); ok {
		r0 = rf(ctx, review)
	} else {
		r0 = ret.Get(0).(models.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Review) error); ok {
		r1 = rf(ctx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReview provides a mock function with given fields: ctx, reviewID
func (_m *Reviews) DeleteReview(ctx context.Context, reviewID uint) error {
	ret := _m.Called(ctx, reviewID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, reviewID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReviewByID provides a mock function with given fields: ctx, reviewID
func (_m *Reviews) GetReviewByID(ctx context.Context, reviewID uint) (models.Review, error) {
	ret := _m.Called(ctx, reviewID)

	var r0 models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (models.Review, error)); ok {
		return rf(ctx, reviewID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) models.Review); ok {
		r0 = rf(ctx, reviewID)
	} else {
		r0 = ret.Get(0).(models.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, reviewID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviews provides a mock function with given fields: ctx, req
func (_m *Reviews) GetReviews(ctx context.Context, req reviews.GetReviewsRequest) (reviews.GetReviewsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 reviews.GetReviewsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reviews.GetReviewsRequest) (reviews.GetReviewsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reviews.GetReviewsRequest) reviews.GetReviewsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(reviews.GetReviewsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reviews.GetReviewsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReview provides a mock function with given fields: ctx, review
func (_m *Reviews) UpdateReview(ctx context.Context, review models.Review) (models.Review, error) {
	ret := _m.Called(ctx, review)

	var r0 models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Review) (models.Review, error)); ok {
		return rf(ctx, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Review) models.Review); ok {
		r0 = rf(ctx, review)
	} else {
		r0 = ret.Get(0).(models.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Review) error); ok {
		r1 = rf(ctx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReviews interface {
	mock.TestingT
	Cleanup(func())
}

// NewReviews creates a new instance of Reviews. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReviews(t mockConstructorTestingTNewReviews) *Reviews {
	mock := &Reviews{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
