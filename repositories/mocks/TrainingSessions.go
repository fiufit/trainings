// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/fiufit/trainings/models"
	mock "github.com/stretchr/testify/mock"

	training_sessions "github.com/fiufit/trainings/contracts/training_sessions"
)

// TrainingSessions is an autogenerated mock type for the TrainingSessions type
type TrainingSessions struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, session
func (_m *TrainingSessions) Create(ctx context.Context, session models.TrainingSession) (models.TrainingSession, error) {
	ret := _m.Called(ctx, session)

	var r0 models.TrainingSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TrainingSession) (models.TrainingSession, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TrainingSession) models.TrainingSession); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Get(0).(models.TrainingSession)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TrainingSession) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, req
func (_m *TrainingSessions) Get(ctx context.Context, req training_sessions.GetTrainingSessionsRequest) ([]models.TrainingSession, error) {
	ret := _m.Called(ctx, req)

	var r0 []models.TrainingSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, training_sessions.GetTrainingSessionsRequest) ([]models.TrainingSession, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, training_sessions.GetTrainingSessionsRequest) []models.TrainingSession); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TrainingSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, training_sessions.GetTrainingSessionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, sessionID
func (_m *TrainingSessions) GetByID(ctx context.Context, sessionID uint) (models.TrainingSession, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 models.TrainingSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (models.TrainingSession, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) models.TrainingSession); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Get(0).(models.TrainingSession)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, session
func (_m *TrainingSessions) Update(ctx context.Context, session models.TrainingSession) (models.TrainingSession, error) {
	ret := _m.Called(ctx, session)

	var r0 models.TrainingSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TrainingSession) (models.TrainingSession, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TrainingSession) models.TrainingSession); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Get(0).(models.TrainingSession)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TrainingSession) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTrainingSessions interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrainingSessions creates a new instance of TrainingSessions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrainingSessions(t mockConstructorTestingTNewTrainingSessions) *TrainingSessions {
	mock := &TrainingSessions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
